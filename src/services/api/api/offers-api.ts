/* tslint:disable */
/* eslint-disable */
/**
 * Rgr
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ModifyOfferDto } from '../models';
// @ts-ignore
import { Offer } from '../models';
/**
 * OffersApi - axios parameter creator
 * @export
 */
export const OffersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersEmployerIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('offersEmployerIdGet', 'id', id)
            const localVarPath = `/offers/employer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyOfferDto} [modifyOfferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersEmployerIdPost: async (id: string, modifyOfferDto?: ModifyOfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('offersEmployerIdPost', 'id', id)
            const localVarPath = `/offers/employer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyOfferDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('offersIdDelete', 'id', id)
            const localVarPath = `/offers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyOfferDto} [modifyOfferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersIdPut: async (id: string, modifyOfferDto?: ModifyOfferDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('offersIdPut', 'id', id)
            const localVarPath = `/offers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyOfferDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OffersApi - functional programming interface
 * @export
 */
export const OffersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OffersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offersEmployerIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Offer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offersEmployerIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyOfferDto} [modifyOfferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offersEmployerIdPost(id: string, modifyOfferDto?: ModifyOfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Offer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offersEmployerIdPost(id, modifyOfferDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offersIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Offer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offersIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyOfferDto} [modifyOfferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async offersIdPut(id: string, modifyOfferDto?: ModifyOfferDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Offer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.offersIdPut(id, modifyOfferDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OffersApi - factory interface
 * @export
 */
export const OffersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OffersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersEmployerIdGet(id: string, options?: any): AxiosPromise<Array<Offer>> {
            return localVarFp.offersEmployerIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyOfferDto} [modifyOfferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersEmployerIdPost(id: string, modifyOfferDto?: ModifyOfferDto, options?: any): AxiosPromise<Array<Offer>> {
            return localVarFp.offersEmployerIdPost(id, modifyOfferDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersIdDelete(id: string, options?: any): AxiosPromise<Offer> {
            return localVarFp.offersIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyOfferDto} [modifyOfferDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        offersIdPut(id: string, modifyOfferDto?: ModifyOfferDto, options?: any): AxiosPromise<Offer> {
            return localVarFp.offersIdPut(id, modifyOfferDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for offersEmployerIdGet operation in OffersApi.
 * @export
 * @interface OffersApiOffersEmployerIdGetRequest
 */
export interface OffersApiOffersEmployerIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof OffersApiOffersEmployerIdGet
     */
    readonly id: string
}

/**
 * Request parameters for offersEmployerIdPost operation in OffersApi.
 * @export
 * @interface OffersApiOffersEmployerIdPostRequest
 */
export interface OffersApiOffersEmployerIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof OffersApiOffersEmployerIdPost
     */
    readonly id: string

    /**
     * 
     * @type {ModifyOfferDto}
     * @memberof OffersApiOffersEmployerIdPost
     */
    readonly modifyOfferDto?: ModifyOfferDto
}

/**
 * Request parameters for offersIdDelete operation in OffersApi.
 * @export
 * @interface OffersApiOffersIdDeleteRequest
 */
export interface OffersApiOffersIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof OffersApiOffersIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for offersIdPut operation in OffersApi.
 * @export
 * @interface OffersApiOffersIdPutRequest
 */
export interface OffersApiOffersIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof OffersApiOffersIdPut
     */
    readonly id: string

    /**
     * 
     * @type {ModifyOfferDto}
     * @memberof OffersApiOffersIdPut
     */
    readonly modifyOfferDto?: ModifyOfferDto
}

/**
 * OffersApi - object-oriented interface
 * @export
 * @class OffersApi
 * @extends {BaseAPI}
 */
export class OffersApi extends BaseAPI {
    /**
     * 
     * @param {OffersApiOffersEmployerIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    public offersEmployerIdGet(requestParameters: OffersApiOffersEmployerIdGetRequest, options?: AxiosRequestConfig) {
        return OffersApiFp(this.configuration).offersEmployerIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OffersApiOffersEmployerIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    public offersEmployerIdPost(requestParameters: OffersApiOffersEmployerIdPostRequest, options?: AxiosRequestConfig) {
        return OffersApiFp(this.configuration).offersEmployerIdPost(requestParameters.id, requestParameters.modifyOfferDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OffersApiOffersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    public offersIdDelete(requestParameters: OffersApiOffersIdDeleteRequest, options?: AxiosRequestConfig) {
        return OffersApiFp(this.configuration).offersIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OffersApiOffersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    public offersIdPut(requestParameters: OffersApiOffersIdPutRequest, options?: AxiosRequestConfig) {
        return OffersApiFp(this.configuration).offersIdPut(requestParameters.id, requestParameters.modifyOfferDto, options).then((request) => request(this.axios, this.basePath));
    }
}
