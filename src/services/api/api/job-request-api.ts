/* tslint:disable */
/* eslint-disable */
/**
 * Rgr
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { JobRequest } from '../models';
// @ts-ignore
import { ModifyJobRequestDto } from '../models';
/**
 * JobRequestApi - axios parameter creator
 * @export
 */
export const JobRequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestClientIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobRequestClientIdGet', 'id', id)
            const localVarPath = `/job-request/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyJobRequestDto} [modifyJobRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestClientIdPost: async (id: string, modifyJobRequestDto?: ModifyJobRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobRequestClientIdPost', 'id', id)
            const localVarPath = `/job-request/client/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyJobRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobRequestIdDelete', 'id', id)
            const localVarPath = `/job-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyJobRequestDto} [modifyJobRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestIdPut: async (id: string, modifyJobRequestDto?: ModifyJobRequestDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('jobRequestIdPut', 'id', id)
            const localVarPath = `/job-request/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyJobRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobRequestApi - functional programming interface
 * @export
 */
export const JobRequestApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobRequestApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobRequestClientIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobRequest>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobRequestClientIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyJobRequestDto} [modifyJobRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobRequestClientIdPost(id: string, modifyJobRequestDto?: ModifyJobRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobRequest>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobRequestClientIdPost(id, modifyJobRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobRequestIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobRequestIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyJobRequestDto} [modifyJobRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async jobRequestIdPut(id: string, modifyJobRequestDto?: ModifyJobRequestDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.jobRequestIdPut(id, modifyJobRequestDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobRequestApi - factory interface
 * @export
 */
export const JobRequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobRequestApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestClientIdGet(id: string, options?: any): AxiosPromise<Array<JobRequest>> {
            return localVarFp.jobRequestClientIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyJobRequestDto} [modifyJobRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestClientIdPost(id: string, modifyJobRequestDto?: ModifyJobRequestDto, options?: any): AxiosPromise<Array<JobRequest>> {
            return localVarFp.jobRequestClientIdPost(id, modifyJobRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestIdDelete(id: string, options?: any): AxiosPromise<JobRequest> {
            return localVarFp.jobRequestIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyJobRequestDto} [modifyJobRequestDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobRequestIdPut(id: string, modifyJobRequestDto?: ModifyJobRequestDto, options?: any): AxiosPromise<JobRequest> {
            return localVarFp.jobRequestIdPut(id, modifyJobRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for jobRequestClientIdGet operation in JobRequestApi.
 * @export
 * @interface JobRequestApiJobRequestClientIdGetRequest
 */
export interface JobRequestApiJobRequestClientIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof JobRequestApiJobRequestClientIdGet
     */
    readonly id: string
}

/**
 * Request parameters for jobRequestClientIdPost operation in JobRequestApi.
 * @export
 * @interface JobRequestApiJobRequestClientIdPostRequest
 */
export interface JobRequestApiJobRequestClientIdPostRequest {
    /**
     * 
     * @type {string}
     * @memberof JobRequestApiJobRequestClientIdPost
     */
    readonly id: string

    /**
     * 
     * @type {ModifyJobRequestDto}
     * @memberof JobRequestApiJobRequestClientIdPost
     */
    readonly modifyJobRequestDto?: ModifyJobRequestDto
}

/**
 * Request parameters for jobRequestIdDelete operation in JobRequestApi.
 * @export
 * @interface JobRequestApiJobRequestIdDeleteRequest
 */
export interface JobRequestApiJobRequestIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof JobRequestApiJobRequestIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for jobRequestIdPut operation in JobRequestApi.
 * @export
 * @interface JobRequestApiJobRequestIdPutRequest
 */
export interface JobRequestApiJobRequestIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof JobRequestApiJobRequestIdPut
     */
    readonly id: string

    /**
     * 
     * @type {ModifyJobRequestDto}
     * @memberof JobRequestApiJobRequestIdPut
     */
    readonly modifyJobRequestDto?: ModifyJobRequestDto
}

/**
 * JobRequestApi - object-oriented interface
 * @export
 * @class JobRequestApi
 * @extends {BaseAPI}
 */
export class JobRequestApi extends BaseAPI {
    /**
     * 
     * @param {JobRequestApiJobRequestClientIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRequestApi
     */
    public jobRequestClientIdGet(requestParameters: JobRequestApiJobRequestClientIdGetRequest, options?: AxiosRequestConfig) {
        return JobRequestApiFp(this.configuration).jobRequestClientIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JobRequestApiJobRequestClientIdPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRequestApi
     */
    public jobRequestClientIdPost(requestParameters: JobRequestApiJobRequestClientIdPostRequest, options?: AxiosRequestConfig) {
        return JobRequestApiFp(this.configuration).jobRequestClientIdPost(requestParameters.id, requestParameters.modifyJobRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JobRequestApiJobRequestIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRequestApi
     */
    public jobRequestIdDelete(requestParameters: JobRequestApiJobRequestIdDeleteRequest, options?: AxiosRequestConfig) {
        return JobRequestApiFp(this.configuration).jobRequestIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JobRequestApiJobRequestIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobRequestApi
     */
    public jobRequestIdPut(requestParameters: JobRequestApiJobRequestIdPutRequest, options?: AxiosRequestConfig) {
        return JobRequestApiFp(this.configuration).jobRequestIdPut(requestParameters.id, requestParameters.modifyJobRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}
