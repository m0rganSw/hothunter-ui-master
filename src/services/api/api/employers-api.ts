/* tslint:disable */
/* eslint-disable */
/**
 * Rgr
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Employer } from '../models';
// @ts-ignore
import { ModifyEmployerDto } from '../models';
/**
 * EmployersApi - axios parameter creator
 * @export
 */
export const EmployersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersDeleteIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employersDeleteIdDelete', 'id', id)
            const localVarPath = `/employers/delete/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employersIdGet', 'id', id)
            const localVarPath = `/employers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyEmployerDto} [modifyEmployerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersIdPut: async (id: string, modifyEmployerDto?: ModifyEmployerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('employersIdPut', 'id', id)
            const localVarPath = `/employers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyEmployerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ModifyEmployerDto} [modifyEmployerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersPost: async (modifyEmployerDto?: ModifyEmployerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/employers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(modifyEmployerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EmployersApi - functional programming interface
 * @export
 */
export const EmployersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EmployersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employersDeleteIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employersDeleteIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Employer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employersIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employersIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyEmployerDto} [modifyEmployerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employersIdPut(id: string, modifyEmployerDto?: ModifyEmployerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employersIdPut(id, modifyEmployerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {ModifyEmployerDto} [modifyEmployerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async employersPost(modifyEmployerDto?: ModifyEmployerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Employer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.employersPost(modifyEmployerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EmployersApi - factory interface
 * @export
 */
export const EmployersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EmployersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersDeleteIdDelete(id: string, options?: any): AxiosPromise<Employer> {
            return localVarFp.employersDeleteIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersGet(options?: any): AxiosPromise<Array<Employer>> {
            return localVarFp.employersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersIdGet(id: string, options?: any): AxiosPromise<Employer> {
            return localVarFp.employersIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ModifyEmployerDto} [modifyEmployerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersIdPut(id: string, modifyEmployerDto?: ModifyEmployerDto, options?: any): AxiosPromise<Employer> {
            return localVarFp.employersIdPut(id, modifyEmployerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {ModifyEmployerDto} [modifyEmployerDto] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        employersPost(modifyEmployerDto?: ModifyEmployerDto, options?: any): AxiosPromise<Employer> {
            return localVarFp.employersPost(modifyEmployerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for employersDeleteIdDelete operation in EmployersApi.
 * @export
 * @interface EmployersApiEmployersDeleteIdDeleteRequest
 */
export interface EmployersApiEmployersDeleteIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployersApiEmployersDeleteIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for employersIdGet operation in EmployersApi.
 * @export
 * @interface EmployersApiEmployersIdGetRequest
 */
export interface EmployersApiEmployersIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployersApiEmployersIdGet
     */
    readonly id: string
}

/**
 * Request parameters for employersIdPut operation in EmployersApi.
 * @export
 * @interface EmployersApiEmployersIdPutRequest
 */
export interface EmployersApiEmployersIdPutRequest {
    /**
     * 
     * @type {string}
     * @memberof EmployersApiEmployersIdPut
     */
    readonly id: string

    /**
     * 
     * @type {ModifyEmployerDto}
     * @memberof EmployersApiEmployersIdPut
     */
    readonly modifyEmployerDto?: ModifyEmployerDto
}

/**
 * Request parameters for employersPost operation in EmployersApi.
 * @export
 * @interface EmployersApiEmployersPostRequest
 */
export interface EmployersApiEmployersPostRequest {
    /**
     * 
     * @type {ModifyEmployerDto}
     * @memberof EmployersApiEmployersPost
     */
    readonly modifyEmployerDto?: ModifyEmployerDto
}

/**
 * EmployersApi - object-oriented interface
 * @export
 * @class EmployersApi
 * @extends {BaseAPI}
 */
export class EmployersApi extends BaseAPI {
    /**
     * 
     * @param {EmployersApiEmployersDeleteIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public employersDeleteIdDelete(requestParameters: EmployersApiEmployersDeleteIdDeleteRequest, options?: AxiosRequestConfig) {
        return EmployersApiFp(this.configuration).employersDeleteIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public employersGet(options?: AxiosRequestConfig) {
        return EmployersApiFp(this.configuration).employersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmployersApiEmployersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public employersIdGet(requestParameters: EmployersApiEmployersIdGetRequest, options?: AxiosRequestConfig) {
        return EmployersApiFp(this.configuration).employersIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmployersApiEmployersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public employersIdPut(requestParameters: EmployersApiEmployersIdPutRequest, options?: AxiosRequestConfig) {
        return EmployersApiFp(this.configuration).employersIdPut(requestParameters.id, requestParameters.modifyEmployerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {EmployersApiEmployersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EmployersApi
     */
    public employersPost(requestParameters: EmployersApiEmployersPostRequest = {}, options?: AxiosRequestConfig) {
        return EmployersApiFp(this.configuration).employersPost(requestParameters.modifyEmployerDto, options).then((request) => request(this.axios, this.basePath));
    }
}
